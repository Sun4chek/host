import json
import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram.types import WebAppInfo
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
USER_BOT_TOKEN = os.getenv("USER_BOT_TOKEN")
ADMIN_BOT_TOKEN = os.getenv("ADMIN_BOT_TOKEN")
BASE_URL = os.getenv("WEBHOOK_BASE_URL", "https://buhtarest-webhook.onrender.com")
ALLOWED_ADMINS = set(os.getenv("ALLOWED_ADMINS", "").split(","))
PORT = int(os.getenv("WEBHOOK_PORT", 8001))
API_BASE_URL = os.getenv("API_BASE_URL", "https://buhtarest-api.onrender.com")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–æ–≤
user_bot = Bot(token=USER_BOT_TOKEN)
admin_bot = Bot(token=ADMIN_BOT_TOKEN)
user_dp = Dispatcher()
admin_dp = Dispatcher()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
@user_dp.message(Command("start"))
async def start_command_user(message: types.Message):
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    markup = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(
                text="–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é",
                web_app=WebAppInfo(url=f"{API_BASE_URL}/static/user_webapp.html")
            )]
        ],
        resize_keyboard=True
    )
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é:", reply_markup=markup)

@user_dp.message()
async def handle_webapp_data_user(message: types.Message):
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω—ã WebApp –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    try:
        if not message.web_app_data:
            logger.error("WebApp –Ω–µ –ø–µ—Ä–µ–¥–∞–ª –¥–∞–Ω–Ω—ã–µ")
            await message.answer("–û—à–∏–±–∫–∞: WebApp –Ω–µ –ø–µ—Ä–µ–¥–∞–ª –¥–∞–Ω–Ω—ã–µ üò¢")
            return

        order_data = json.loads(message.web_app_data.data)
        customer = order_data['customer']
        order_details = order_data['orderDetails']

        response = (
            f"‚úÖ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n"
            f"üë§ –§–∞–º–∏–ª–∏—è: {customer['lastName']}\n"
            f"üë§ –ò–º—è: {customer['firstName']}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {customer['phone']}\n"
            f"üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {order_details['paymentMethod']}\n"
            f"üöö –°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è: {order_details['deliveryMethod']}\n"
            f"üè† –ù–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã: {customer['roomNumber']}\n\n"
            f"üçΩ –ó–∞–∫–∞–∑–∞–Ω–Ω—ã–µ –±–ª—é–¥–∞:\n"
        )

        for item in order_details['items']:
            response += f"- {item['name']} ({item['quantity']} —à—Ç.) - {item['price']}‚ÇΩ\n"

        response += f"\nüí∏ –ò—Ç–æ–≥–æ: {order_details['total']}‚ÇΩ\n"
        if any(item.get('isAlcohol', False) for item in order_details['items']):
            response += f"‚ÑπÔ∏è {order_details['alcoholNote']}"

        await message.answer(response)
        for admin_id in ALLOWED_ADMINS:
            await user_bot.send_message(admin_id, f"üì© –ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\n\n{response}")

    except json.JSONDecodeError:
        logger.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ JSON –¥–∞–Ω–Ω—ã–µ –æ—Ç WebApp")
        await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—É—á–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ üò¢")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebApp –¥–∞–Ω–Ω—ã—Ö: {e}")
        await message.answer(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö üò¢\n\n{str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –±–æ—Ç–∞
@admin_dp.message(Command("start"))
async def start_command_admin(message: types.Message):
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –∞–¥–º–∏–Ω–∞ {message.from_user.id}")
    if str(message.from_user.id) not in ALLOWED_ADMINS:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return

    markup = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(
                text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é",
                web_app=WebAppInfo(url=f"{API_BASE_URL}/static/admin_webapp.html")
            )]
        ],
        resize_keyboard=True
    )
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –∏–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é:", reply_markup=markup)

@admin_dp.message()
async def handle_webapp_data_admin(message: types.Message):
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω—ã WebApp –¥–∞–Ω–Ω—ã–µ –æ—Ç –∞–¥–º–∏–Ω–∞ {message.from_user.id}")
    if str(message.from_user.id) not in ALLOWED_ADMINS:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return

    try:
        if not message.web_app_data:
            logger.error("WebApp –Ω–µ –ø–µ—Ä–µ–¥–∞–ª –¥–∞–Ω–Ω—ã–µ")
            await message.answer("–û—à–∏–±–∫–∞: WebApp –Ω–µ –ø–µ—Ä–µ–¥–∞–ª –¥–∞–Ω–Ω—ã–µ üò¢")
            return

        data = json.loads(message.web_app_data.data)
        action = data.get('action')

        if action == 'add':
            await admin_bot.send_message(message.from_user.id, f"–î–æ–±–∞–≤–ª–µ–Ω–æ –±–ª—é–¥–æ: {data['name']}")
        elif action == 'update':
            await admin_bot.send_message(message.from_user.id, f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –±–ª—é–¥–æ: {data['name']}")
        elif action == 'delete':
            await admin_bot.send_message(message.from_user.id, f"–£–¥–∞–ª–µ–Ω–æ –±–ª—é–¥–æ: {data['name']}")
        elif action == 'stop_list':
            await admin_bot.send_message(message.from_user.id, f"–ë–ª—é–¥–æ {data['name']} –¥–æ–±–∞–≤–ª–µ–Ω–æ/—É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å—Ç–æ–ø-–ª–∏—Å—Ç–∞")

    except json.JSONDecodeError:
        logger.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ JSON –¥–∞–Ω–Ω—ã–µ –æ—Ç WebApp")
        await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—É—á–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ üò¢")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebApp –¥–∞–Ω–Ω—ã—Ö: {e}")
        await message.answer(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö üò¢\n\n{str(e)}")

# Webhook –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
async def on_startup(app):
    logger.debug(f"–ó–∞–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤ —Å BASE_URL: {BASE_URL}")
    webhook_path_user = "/webhook/user"
    webhook_path_admin = "/webhook/admin"
    try:
        await user_bot.set_webhook(f"{BASE_URL}{webhook_path_user}")
        await admin_bot.set_webhook(f"{BASE_URL}{webhook_path_admin}")
        logger.debug(f"Webhooks —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: {BASE_URL}{webhook_path_user}, {BASE_URL}{webhook_path_admin}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤: {e}")
    logger.debug(f"–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ –ø–æ—Ä—Ç—É: {PORT}")

async def on_shutdown(app):
    logger.debug("–£–¥–∞–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–æ–≤")
    try:
        await user_bot.delete_webhook()
        await admin_bot.delete_webhook()
        await user_bot.session.close()
        await admin_bot.session.close()
        logger.debug("Webhooks —É–¥–∞–ª–µ–Ω—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–æ–≤: {e}")

# Aiohttp –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
aiohttp_app = web.Application()
user_handler = SimpleRequestHandler(dispatcher=user_dp, bot=user_bot)
admin_handler = SimpleRequestHandler(dispatcher=admin_dp, bot=admin_bot)
user_handler.register(aiohttp_app, path="/webhook/user")
admin_handler.register(aiohttp_app, path="/webhook/admin")
setup_application(aiohttp_app, user_dp, bot=user_bot)
setup_application(aiohttp_app, admin_dp, bot=admin_bot)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—É–∫–æ–≤
aiohttp_app.on_startup.append(on_startup)
aiohttp_app.on_shutdown.append(on_shutdown)

if __name__ == "__main__":
    logger.debug(f"–ó–∞–ø—É—Å–∫ aiohttp –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
    web.run_app(aiohttp_app, host="0.0.0.0", port=PORT)