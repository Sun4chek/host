


#
# import json
# from aiogram import Bot, Dispatcher, types
# from aiogram.filters import Command
#
# ADMIN_ID = "1948431948"
# bot = Bot('7723973774:AAHxO5XxnwbtJp7WQPs0JeQ0YVipgGe8IM8')
# dp = Dispatcher()
#
# @dp.message(Command("start"))
# async def start_command(message: types.Message):
#     markup = types.ReplyKeyboardMarkup(
#         keyboard=[
#             [types.KeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", web_app=types.WebAppInfo(url="https://sun4chek.github.io/host/"))]
#         ],
#         resize_keyboard=True
#     )
#     await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", reply_markup=markup)
#
# @dp.message()
# async def handle_webapp_data(message: types.Message):
#     try:
#         if not message.web_app_data:
#             await message.answer("–û—à–∏–±–∫–∞: WebApp –Ω–µ –ø–µ—Ä–µ–¥–∞–ª –¥–∞–Ω–Ω—ã–µ üò¢")
#             return
#
#         print(f"üîç –î–∞–Ω–Ω—ã–µ –æ—Ç WebApp: {message.web_app_data.data}")  # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
#
#         user_data = json.loads(message.web_app_data.data)
#
#         response = (
#             f"‚úÖ –ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è!\n\n"
#             f"üë§ –ò–º—è: {user_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
#             f"üìß Email: {user_data.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
#             f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}"
#         )
#
#         await message.answer(response)
#         await bot.send_message(ADMIN_ID, f"üì© –ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:\n\n{response}")
#
#     except json.JSONDecodeError:
#         await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—É—á–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ üò¢")
#     except Exception as e:
#         await message.answer(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö üò¢\n\n{str(e)}")
#
#
# async def main():
#     await dp.start_polling(bot)
#
# if __name__ == "__main__":
#     import asyncio
#     asyncio.run(main())


import json
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command

ADMIN_ID = "1948431948"
bot = Bot('7723973774:AAHxO5XxnwbtJp7WQPs0JeQ0YVipgGe8IM8')
dp = Dispatcher()

@dp.message(Command("start"))
async def start_command(message: types.Message):
    markup = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é", web_app=types.WebAppInfo(url="https://sun4chek.github.io/host/"))]
        ],
        resize_keyboard=True
    )
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é:", reply_markup=markup)

@dp.message()
async def handle_webapp_data(message: types.Message):
    try:
        if not message.web_app_data:
            await message.answer("–û—à–∏–±–∫–∞: WebApp –Ω–µ –ø–µ—Ä–µ–¥–∞–ª –¥–∞–Ω–Ω—ã–µ üò¢")
            return

        print(f"üîç –î–∞–Ω–Ω—ã–µ –æ—Ç WebApp: {message.web_app_data.data}")  # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ

        # –ü–∞—Ä—Å–∏–º JSON-–æ–±—ä–µ–∫—Ç
        user_data = json.loads(message.web_app_data.data)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        response = (
            f"‚úÖ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n"
            f"üë§ –§–∞–º–∏–ª–∏—è: {user_data.get('lastName', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üë§ –ò–º—è: {user_data.get('firstName', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {user_data.get('paymentMethod', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üöö –°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è: {user_data.get('deliveryMethod', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üè† –ù–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã: {user_data.get('roomNumber', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
            f"üçΩ –ó–∞–∫–∞–∑–∞–Ω–Ω—ã–µ –±–ª—é–¥–∞:\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –±–ª—é–¥
        for item in user_data.get('cart', []):
            response += f"- {item['name']} - {item['price']}‚ÇΩ\n"

        response += f"\nüí∏ –ò—Ç–æ–≥–æ: {user_data.get('total', '0')}‚ÇΩ"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(response)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await bot.send_message(ADMIN_ID, f"üì© –ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\n\n{response}")

    except json.JSONDecodeError:
        await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—É—á–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ üò¢")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö üò¢\n\n{str(e)}")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())